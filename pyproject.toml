[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.8"
version = "0.0.1"
name = "expasy-scripts"
description = "Scripts for Expasy 4, prepare data, train models, etc."
license = "MIT"
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "Expasy",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]

dependencies = [
    "python-dotenv",
    "tqdm",
    "requests",
    "rdflib",
    "SPARQLWrapper",
    "pandas",
    "ipykernel",
    "openai",
    "bs4",
]


[project.optional-dependencies]
test = [
    "ruff",
    "pip-tools",
]


[project.urls]
Homepage = "https://github.com/sib-swiss/expasy4-scripts"
Documentation = "https://github.com/sib-swiss/expasy4-scripts"
History = "https://github.com/sib-swiss/expasy4-scripts/releases"
Tracker = "https://github.com/sib-swiss/expasy4-scripts/issues"
Source = "https://github.com/sib-swiss/expasy4-scripts"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
]
post-install-commands = []

[tool.hatch.envs.default.scripts]
fmt = [
    "ruff format",
    "ruff check --fix",
]
compile = "pip-compile -o requirements.txt pyproject.toml"


## TOOLS
[tool.hatch.build.targets.wheel]
packages = ["src/expasy_scripts"]

# If you need to import packages from git URLs:
# [tool.hatch.metadata]
# allow-direct-references = true


# https://github.com/astral-sh/ruff#configuration
[tool.ruff]
src = ["src"]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "I",     # isort
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    # "FBT",   # flake8-boolean-trap
    "F",     # pyflakes
    "UP",    # pyupgrade
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    # "PLR",   # pylint refactor Magic value used in comparison, consider replacing 400 with a constant variable
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
ignore = [
    "E501", # line too long
    "C901", # too complex
    "T201", # do not use print
    "B008", # do not perform function calls in argument defaults
]
